// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server_management

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SMServiceClient is the client API for SMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SMServiceClient interface {
	GetServers(ctx context.Context, in *GetServersRequest, opts ...grpc.CallOption) (*GetServersResponse, error)
	AddServer(ctx context.Context, in *AddServerRequest, opts ...grpc.CallOption) (*Server, error)
	GetServerById(ctx context.Context, in *GetServerByIdRequest, opts ...grpc.CallOption) (*Server, error)
	UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...grpc.CallOption) (*Server, error)
	DeleteServer(ctx context.Context, in *GetServerByIdRequest, opts ...grpc.CallOption) (*DeleteServerResponse, error)
	ExportServers(ctx context.Context, in *ExportServersRequest, opts ...grpc.CallOption) (*ExportServersResponse, error)
	CheckServer(ctx context.Context, in *GetServerByIdRequest, opts ...grpc.CallOption) (*CheckServerResponse, error)
	GetServerLog(ctx context.Context, in *GetServerLogRequest, opts ...grpc.CallOption) (*GetServerLogResponse, error)
	ValidateServer(ctx context.Context, in *GetServerByIdRequest, opts ...grpc.CallOption) (*ValidateServerResponse, error)
	RemoteCommand(ctx context.Context, in *RemoteCommandRequest, opts ...grpc.CallOption) (*RemoteCommandResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*User, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Authenticate(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	CheckServerExists(ctx context.Context, in *CheckServerExistsRequest, opts ...grpc.CallOption) (*CheckServerExistsResponse, error)
}

type sMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSMServiceClient(cc grpc.ClientConnInterface) SMServiceClient {
	return &sMServiceClient{cc}
}

func (c *sMServiceClient) GetServers(ctx context.Context, in *GetServersRequest, opts ...grpc.CallOption) (*GetServersResponse, error) {
	out := new(GetServersResponse)
	err := c.cc.Invoke(ctx, "/server_management.SMService/GetServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) AddServer(ctx context.Context, in *AddServerRequest, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := c.cc.Invoke(ctx, "/server_management.SMService/AddServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) GetServerById(ctx context.Context, in *GetServerByIdRequest, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := c.cc.Invoke(ctx, "/server_management.SMService/GetServerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := c.cc.Invoke(ctx, "/server_management.SMService/UpdateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) DeleteServer(ctx context.Context, in *GetServerByIdRequest, opts ...grpc.CallOption) (*DeleteServerResponse, error) {
	out := new(DeleteServerResponse)
	err := c.cc.Invoke(ctx, "/server_management.SMService/DeleteServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) ExportServers(ctx context.Context, in *ExportServersRequest, opts ...grpc.CallOption) (*ExportServersResponse, error) {
	out := new(ExportServersResponse)
	err := c.cc.Invoke(ctx, "/server_management.SMService/ExportServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) CheckServer(ctx context.Context, in *GetServerByIdRequest, opts ...grpc.CallOption) (*CheckServerResponse, error) {
	out := new(CheckServerResponse)
	err := c.cc.Invoke(ctx, "/server_management.SMService/CheckServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) GetServerLog(ctx context.Context, in *GetServerLogRequest, opts ...grpc.CallOption) (*GetServerLogResponse, error) {
	out := new(GetServerLogResponse)
	err := c.cc.Invoke(ctx, "/server_management.SMService/GetServerLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) ValidateServer(ctx context.Context, in *GetServerByIdRequest, opts ...grpc.CallOption) (*ValidateServerResponse, error) {
	out := new(ValidateServerResponse)
	err := c.cc.Invoke(ctx, "/server_management.SMService/ValidateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) RemoteCommand(ctx context.Context, in *RemoteCommandRequest, opts ...grpc.CallOption) (*RemoteCommandResponse, error) {
	out := new(RemoteCommandResponse)
	err := c.cc.Invoke(ctx, "/server_management.SMService/RemoteCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/server_management.SMService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/server_management.SMService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) Authenticate(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/server_management.SMService/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/server_management.SMService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) CheckServerExists(ctx context.Context, in *CheckServerExistsRequest, opts ...grpc.CallOption) (*CheckServerExistsResponse, error) {
	out := new(CheckServerExistsResponse)
	err := c.cc.Invoke(ctx, "/server_management.SMService/CheckServerExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SMServiceServer is the server API for SMService service.
// All implementations should embed UnimplementedSMServiceServer
// for forward compatibility
type SMServiceServer interface {
	GetServers(context.Context, *GetServersRequest) (*GetServersResponse, error)
	AddServer(context.Context, *AddServerRequest) (*Server, error)
	GetServerById(context.Context, *GetServerByIdRequest) (*Server, error)
	UpdateServer(context.Context, *UpdateServerRequest) (*Server, error)
	DeleteServer(context.Context, *GetServerByIdRequest) (*DeleteServerResponse, error)
	ExportServers(context.Context, *ExportServersRequest) (*ExportServersResponse, error)
	CheckServer(context.Context, *GetServerByIdRequest) (*CheckServerResponse, error)
	GetServerLog(context.Context, *GetServerLogRequest) (*GetServerLogResponse, error)
	ValidateServer(context.Context, *GetServerByIdRequest) (*ValidateServerResponse, error)
	RemoteCommand(context.Context, *RemoteCommandRequest) (*RemoteCommandResponse, error)
	Register(context.Context, *RegisterRequest) (*User, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Authenticate(context.Context, *LoginRequest) (*AuthenticateResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	CheckServerExists(context.Context, *CheckServerExistsRequest) (*CheckServerExistsResponse, error)
}

// UnimplementedSMServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSMServiceServer struct {
}

func (UnimplementedSMServiceServer) GetServers(context.Context, *GetServersRequest) (*GetServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServers not implemented")
}
func (UnimplementedSMServiceServer) AddServer(context.Context, *AddServerRequest) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServer not implemented")
}
func (UnimplementedSMServiceServer) GetServerById(context.Context, *GetServerByIdRequest) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerById not implemented")
}
func (UnimplementedSMServiceServer) UpdateServer(context.Context, *UpdateServerRequest) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServer not implemented")
}
func (UnimplementedSMServiceServer) DeleteServer(context.Context, *GetServerByIdRequest) (*DeleteServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServer not implemented")
}
func (UnimplementedSMServiceServer) ExportServers(context.Context, *ExportServersRequest) (*ExportServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportServers not implemented")
}
func (UnimplementedSMServiceServer) CheckServer(context.Context, *GetServerByIdRequest) (*CheckServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckServer not implemented")
}
func (UnimplementedSMServiceServer) GetServerLog(context.Context, *GetServerLogRequest) (*GetServerLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerLog not implemented")
}
func (UnimplementedSMServiceServer) ValidateServer(context.Context, *GetServerByIdRequest) (*ValidateServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateServer not implemented")
}
func (UnimplementedSMServiceServer) RemoteCommand(context.Context, *RemoteCommandRequest) (*RemoteCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteCommand not implemented")
}
func (UnimplementedSMServiceServer) Register(context.Context, *RegisterRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedSMServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedSMServiceServer) Authenticate(context.Context, *LoginRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedSMServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedSMServiceServer) CheckServerExists(context.Context, *CheckServerExistsRequest) (*CheckServerExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckServerExists not implemented")
}

// UnsafeSMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SMServiceServer will
// result in compilation errors.
type UnsafeSMServiceServer interface {
	mustEmbedUnimplementedSMServiceServer()
}

func RegisterSMServiceServer(s grpc.ServiceRegistrar, srv SMServiceServer) {
	s.RegisterService(&SMService_ServiceDesc, srv)
}

func _SMService_GetServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).GetServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server_management.SMService/GetServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).GetServers(ctx, req.(*GetServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_AddServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).AddServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server_management.SMService/AddServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).AddServer(ctx, req.(*AddServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_GetServerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).GetServerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server_management.SMService/GetServerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).GetServerById(ctx, req.(*GetServerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_UpdateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).UpdateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server_management.SMService/UpdateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).UpdateServer(ctx, req.(*UpdateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server_management.SMService/DeleteServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).DeleteServer(ctx, req.(*GetServerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_ExportServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).ExportServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server_management.SMService/ExportServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).ExportServers(ctx, req.(*ExportServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_CheckServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).CheckServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server_management.SMService/CheckServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).CheckServer(ctx, req.(*GetServerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_GetServerLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).GetServerLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server_management.SMService/GetServerLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).GetServerLog(ctx, req.(*GetServerLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_ValidateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).ValidateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server_management.SMService/ValidateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).ValidateServer(ctx, req.(*GetServerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_RemoteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).RemoteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server_management.SMService/RemoteCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).RemoteCommand(ctx, req.(*RemoteCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server_management.SMService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server_management.SMService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server_management.SMService/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).Authenticate(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server_management.SMService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_CheckServerExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckServerExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).CheckServerExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server_management.SMService/CheckServerExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).CheckServerExists(ctx, req.(*CheckServerExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SMService_ServiceDesc is the grpc.ServiceDesc for SMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server_management.SMService",
	HandlerType: (*SMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServers",
			Handler:    _SMService_GetServers_Handler,
		},
		{
			MethodName: "AddServer",
			Handler:    _SMService_AddServer_Handler,
		},
		{
			MethodName: "GetServerById",
			Handler:    _SMService_GetServerById_Handler,
		},
		{
			MethodName: "UpdateServer",
			Handler:    _SMService_UpdateServer_Handler,
		},
		{
			MethodName: "DeleteServer",
			Handler:    _SMService_DeleteServer_Handler,
		},
		{
			MethodName: "ExportServers",
			Handler:    _SMService_ExportServers_Handler,
		},
		{
			MethodName: "CheckServer",
			Handler:    _SMService_CheckServer_Handler,
		},
		{
			MethodName: "GetServerLog",
			Handler:    _SMService_GetServerLog_Handler,
		},
		{
			MethodName: "ValidateServer",
			Handler:    _SMService_ValidateServer_Handler,
		},
		{
			MethodName: "RemoteCommand",
			Handler:    _SMService_RemoteCommand_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _SMService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _SMService_Login_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _SMService_Authenticate_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _SMService_Logout_Handler,
		},
		{
			MethodName: "CheckServerExists",
			Handler:    _SMService_CheckServerExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server_management.proto",
}
